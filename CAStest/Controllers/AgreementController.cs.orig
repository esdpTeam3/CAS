using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using CAStest.Data;
using CAStest.Models;
using CAStest.Models.AgrementViewModel;
using CAStest.Models.ContractViewModel;
using System;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Newtonsoft.Json;

namespace CAStest.Controllers
{
    public class Agreement : Controller
    {
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly ApplicationDbContext _context;

        public Agreement(ApplicationDbContext context, UserManager<ApplicationUser> userManager)
        {
            _userManager = userManager;
            _context = context;
        }

        // GET: Contracts
        public async Task<IActionResult> Index(string sortOrder, string searchString)
        {
            ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? "name_desc" : "";
            ViewBag.DateSortParm = sortOrder == "Date" ? "date_desc" : "Date";
            var contract = from c in _context.Contracts.ToList()
                select c;
            foreach (var a in contract)
            {
                if (User.Identity.IsAuthenticated)
                {
                    ViewBag.IsInFavorites = await IsInFavorites(a);
                }
                else
                {
                    ViewBag.IsInFavorites = false;
                }
                
            }
            
            if (!String.IsNullOrEmpty(searchString))
            {
                contract = _context.Contracts.Where(s => s.ContractNumber.Contains(searchString)
                                                         || s.ContractNumber.Contains(searchString));
            }

            switch (sortOrder)
            {
                case "Date":
                    contract = contract.OrderBy(s => s.DateOfOffer);
                    break;
                case "date_desc":
                    contract = contract.OrderBy(s => s.DateOfOffer);
                    break;
            }

            if (User.Claims.FirstOrDefault(c => c.Value == "Admin") != null)
            {
                return View(contract);
            }
            return View(contract.Where(i => i.IsBlocked == false));
        }

        private async Task<bool> IsInFavorites(Contract contract)
        {
            ApplicationUser user = await _userManager.GetUserAsync(this.User);

            return _context.Favorites.FirstOrDefault(f => f.UserId == user.Id && f.ContractId == contract.Id) !=null;
        }

        // GET: Contracts/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            DetailsContractViewModel model = new DetailsContractViewModel();
            model.Contract = await _context.Contracts.Include(c => c.ContractProperties).ThenInclude(c => c.Property)
                .SingleOrDefaultAsync(m => m.Id == id);
            if (model.Contract == null)
            {
                return NotFound();
            }

            return View(model);
        }

        // GET: Contracts/Create
        public IActionResult Create()
        {
            CreateContractViewModel model = new CreateContractViewModel();
            List<IndividualCheckList> list = new List<IndividualCheckList>();
            model.Properties = new SelectList(_context.Properties, "Id", "Name");
            model.Individuals = _context.Individuals.Where(i => i.IsBlocked == false).ToList();
            model.IndividualEntrepreneurs = _context.IndividualEntrepreneurs.Where(e => e.IsBlocked == false).ToList();
            model.Companies = _context.Companies.Where(c => c.IsBlocked == false).ToList();

            return View(model);
        }

        // POST: Contracts/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CreateContractViewModel model)
        {

            Contract contract = new Contract()
            {
                ContractNumber = model.ContractNumber,
                ContractTime = model.ContractTime,
                DateOfOffer = model.DateOfOffer
            };
            _context.Contracts.Add(contract);
            await _context.SaveChangesAsync();

            if(model.actNumbers != null)
            {
                foreach (var actNumber in model.actNumbers)
                {
                    Act act = new Act() { ActNumber = actNumber, ContractId = contract.Id };
                    _context.Acts.Add(act);
                }
            }
            if (model.supplementaryNumbers != null)
            {
                foreach (var suppNumber in model.supplementaryNumbers)
                {
                    Supplementary supp = new Supplementary() { SupplementaryNumber = suppNumber, ContractId = contract.Id };
                    _context.Supplementaries.Add(supp);
                }
            }
            _context.SaveChanges();

            return View(model);
        }

        // GET: Contracts/Create
        public IActionResult Create()
        {
            CreateContractViewModel model = new CreateContractViewModel();
            List<IndividualCheckList> list = new List<IndividualCheckList>();
            model.Properties = new SelectList(_context.Properties, "Id", "Name");
            model.Individuals = _context.Individuals.Where(i => i.IsBlocked == false).ToList();
            model.IndividualEntrepreneurs = _context.IndividualEntrepreneurs.Where(e => e.IsBlocked == false).ToList();
            model.Companies = _context.Companies.Where(c => c.IsBlocked == false).ToList();

            return View(model);
        }

        // POST: Contracts/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create(CreateContractViewModel model)
        {

            Contract contract = new Contract()
            {
                ContractNumber = model.ContractNumber,
                ContractTime = model.ContractTime,
                DateOfOffer = model.DateOfOffer
            };
            _context.Contracts.Add(contract);
            await _context.SaveChangesAsync();

            if(model.actNumbers != null)
            {
                foreach (var actNumber in model.actNumbers)
                {
                    Act act = new Act() { ActNumber = actNumber, ContractId = contract.Id };
                    _context.Acts.Add(act);
                }
            }
            if (model.supplementaryNumbers != null)
            {
                foreach (var suppNumber in model.supplementaryNumbers)
                {
                    Supplementary supp = new Supplementary() { SupplementaryNumber = suppNumber, ContractId = contract.Id };
                    _context.Supplementaries.Add(supp);
                }
            }
            _context.SaveChanges();



            int contractId = contract.Id;
            if (model.valueProperty != null)
            {
                for (int i = 0; i < model.valueProperty.Count; i++)
                {
                    Property test = _context.Properties.FirstOrDefault(u => u.Id == model.propertyId[i]);
                    Contract contractTest = _context.Contracts.FirstOrDefault(u => u.ContractNumber == contract.ContractNumber);
                    _context.ContractPropertieses.Add(new ContractProperties()
                    {
                        Value = model.valueProperty[i],
                        PropertyId = test.Id,
                        ContractId = contractTest.Id
                    });
                    _context.SaveChanges();
                }
            }
            if (model.CounterpartiesId != null)
            {
                for (int i = 0; i < model.CounterpartiesId.Count; i++)
                {
                    _context.ContractCounterparties.Add(new ContractCounterparty()
                    {
                        ContractId = _context.Contracts.FirstOrDefault(c => c.Id == contract.Id).Id,
                        CounterpartyId = model.CounterpartiesId[i]
                    });
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction(nameof(Index));
        }

        // GET: Contracts/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }
            EditContractViewModel model = new EditContractViewModel()
            {
                Contract = await _context.Contracts
                .SingleOrDefaultAsync(m => m.Id == id),
                Counterparties = _context.ContractCounterparties.Include(s => s.Counterparty).Where(c => c.ContractId == id).Select(s => s.Counterparty).ToList()
            };
            model.Individuals = _context.Individuals.Where(i => i.IsBlocked == false).ToList();
            model.IndividualEntrepreneurs = _context.IndividualEntrepreneurs.Where(e => e.IsBlocked == false).ToList();
            model.Companies = _context.Companies.Where(c => c.IsBlocked == false).ToList();
            return View(model);
        }

        // POST: Contracts/Edit/5
        [HttpPost]
        public string DeleteCounterparty(string _counterpartyId, string _contractId)
        {
            if(_counterpartyId != null && _contractId != null)
            {
                ContractCounterparty contractCounterparty = _context.ContractCounterparties.FirstOrDefault(c => c.CounterpartyId.ToString() == _counterpartyId 
                && c.ContractId.ToString() == _contractId);
                _context.ContractCounterparties.Remove(contractCounterparty);
                _context.SaveChanges();
            }
            return JsonConvert.SerializeObject(true,
                new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore });
        }

            int contractId = contract.Id;
            if (model.valueProperty != null)
            {
                for (int i = 0; i < model.valueProperty.Count; i++)
                {
                    Property test = _context.Properties.FirstOrDefault(u => u.Id == model.propertyId[i]);
                    Contract contractTest = _context.Contracts.FirstOrDefault(u => u.ContractNumber == contract.ContractNumber);
                    _context.ContractPropertieses.Add(new ContractProperties()
                    {
                        Value = model.valueProperty[i],
                        PropertyId = test.Id,
                        ContractId = contractTest.Id
                    });
                    _context.SaveChanges();
                }
            }
            if (model.CounterpartiesId != null)
            {
                for (int i = 0; i < model.CounterpartiesId.Count; i++)
                {
                    _context.ContractCounterparties.Add(new ContractCounterparty()
                    {
                        ContractId = _context.Contracts.FirstOrDefault(c => c.Id == contract.Id).Id,
                        CounterpartyId = model.CounterpartiesId[i]
                    });
                    await _context.SaveChangesAsync();
                }
            }
            return RedirectToAction(nameof(Index));
        }

        // GET: Contracts/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }
            EditContractViewModel model = new EditContractViewModel()
            {
                Contract = await _context.Contracts
                .SingleOrDefaultAsync(m => m.Id == id),
                Counterparties = _context.ContractCounterparties.Include(s => s.Counterparty).Where(c => c.ContractId == id).Select(s => s.Counterparty).ToList()
            };
            model.Individuals = _context.Individuals.Where(i => i.IsBlocked == false).ToList();
            model.IndividualEntrepreneurs = _context.IndividualEntrepreneurs.Where(e => e.IsBlocked == false).ToList();
            model.Companies = _context.Companies.Where(c => c.IsBlocked == false).ToList();
            return View(model);
        }

        // POST: Contracts/Edit/5
        [HttpPost]
        public string DeleteCounterparty(string _counterpartyId, string _contractId)
        {
            if(_counterpartyId != null && _contractId != null)
            {
                ContractCounterparty contractCounterparty = _context.ContractCounterparties.FirstOrDefault(c => c.CounterpartyId.ToString() == _counterpartyId 
                && c.ContractId.ToString() == _contractId);
                _context.ContractCounterparties.Remove(contractCounterparty);
                _context.SaveChanges();
            }
            return JsonConvert.SerializeObject(true,
                new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore });
        }
<<<<<<< HEAD
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, EditContractViewModel model)
        {
            if (id != model.Contract.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                   

                    if (model.CounterpartiesId != null)
                    {
                        for (int i = 0; i < model.CounterpartiesId.Count; i++)
                        {
                            ContractCounterparty contractCounterparty = new ContractCounterparty()
                            {
                                ContractId = id,
                                CounterpartyId = model.CounterpartiesId[i]
                            };
                            if (!_context.ContractCounterparties.ToList().Exists(c => c.ContractId == contractCounterparty.ContractId 
                            && c.CounterpartyId == contractCounterparty.CounterpartyId))
                                {
                                    _context.ContractCounterparties.Add(contractCounterparty); 
                                    await _context.SaveChangesAsync();
                                }
                           
                        }
                    }
                    //_context.Update(model.Contract);
                    //await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ContractExists(model.Contract.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(model.Contract);
        }

        // GET: Contracts/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var contract = await _context.Contracts
                .SingleOrDefaultAsync(m => m.Id == id);
            if (contract == null)
            {
                return NotFound();
            }

            return View(contract);
        }

        // POST: Contracts/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var contract = await _context.Contracts.SingleOrDefaultAsync(m => m.Id == id);
            _context.Contracts.Remove(contract);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        public string DeletePropertyEdit(int contractPropertyId)
        {
            if (contractPropertyId != null)
            {
                ContractProperties contractProperties = _context.ContractPropertieses.FirstOrDefault(c => c.Id == contractPropertyId);
                _context.ContractPropertieses.Remove(contractProperties);
                _context.SaveChanges();
            }
            return JsonConvert.SerializeObject(true,
                new JsonSerializerSettings() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore });
        }
=======
>>>>>>> parent of 005f644... #66 Edit and delete contract fields

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, EditContractViewModel model)
        {
            if (id != model.Contract.Id)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                   

                    if (model.CounterpartiesId != null)
                    {
                        for (int i = 0; i < model.CounterpartiesId.Count; i++)
                        {
                            ContractCounterparty contractCounterparty = new ContractCounterparty()
                            {
                                ContractId = id,
                                CounterpartyId = model.CounterpartiesId[i]
                            };
                            if (!_context.ContractCounterparties.ToList().Exists(c => c.ContractId == contractCounterparty.ContractId 
                            && c.CounterpartyId == contractCounterparty.CounterpartyId))
                                {
                                    _context.ContractCounterparties.Add(contractCounterparty); 
                                    await _context.SaveChangesAsync();
                                }
                           
                        }
                    }
                    //_context.Update(model.Contract);
                    //await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!ContractExists(model.Contract.Id))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            return View(model.Contract);
        }

        private bool ContractExists(int id)
        {
            return _context.Contracts.Any(e => e.Id == id);
        }

        public IActionResult Close(int id)
        {
            Contract contract = _context.Contracts.FirstOrDefault(c => c.Id == id);
            contract.IsBlocked = true;
            _context.SaveChanges();

            return RedirectToAction("Index");
        }

        public IActionResult Open(int id)
        {
            Contract contract = _context.Contracts.FirstOrDefault(c => c.Id == id);
            contract.IsBlocked = false;
            _context.SaveChanges();

            return RedirectToAction("Index");
        }

        public async Task<IActionResult> Favorites()
        {
            ApplicationUser user = await _userManager.GetUserAsync(this.User);
            IEnumerable<Contract> contracts = _context.Favorites.Include(f => f.Contract).Where(f => f.UserId == user.Id).Select(f => f.Contract);

            return View("~/Views/Agreement/Index.cshtml", contracts);
        }

        [Authorize]
        [HttpPost]
        public async Task<IActionResult> AddToFAvorites(int id)
        {
            try
            {
                ApplicationUser user = await _userManager.GetUserAsync(this.User);
                Contract contract = _context.Contracts.FirstOrDefault(c => c.Id == id);
        // GET: Contracts/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var contract = await _context.Contracts
                .SingleOrDefaultAsync(m => m.Id == id);
            if (contract == null)
            {
                return NotFound();
            }

            return View(contract);
        }

        // POST: Contracts/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var contract = await _context.Contracts.SingleOrDefaultAsync(m => m.Id == id);
            _context.Contracts.Remove(contract);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool ContractExists(int id)
        {
            return _context.Contracts.Any(e => e.Id == id);
        }

        public IActionResult Close(int id)
        {
            Contract contract = _context.Contracts.FirstOrDefault(c => c.Id == id);
            contract.IsBlocked = true;
            _context.SaveChanges();

                _context.Favorites.Add(new Favorites()
                {
                    User = user,
                    Contract = contract
                });

                _context.SaveChanges();
            }
            catch (Exception)
            {
                return Json(new
                {
                    success = false
                });
            }

            return Json(new
            {
                success = true
            });
        }
    }
}
            return RedirectToAction("Index");
        }

        public IActionResult Open(int id)
        {
            Contract contract = _context.Contracts.FirstOrDefault(c => c.Id == id);
            contract.IsBlocked = false;
            _context.SaveChanges();

            return RedirectToAction("Index");
        }

        public async Task<IActionResult> Favorites()
        {
            ApplicationUser user = await _userManager.GetUserAsync(this.User);
            IEnumerable<Contract> contracts = _context.Favorites.Include(f => f.Contract).Where(f => f.UserId == user.Id).Select(f => f.Contract);

            return View("~/Views/Agreement/Index.cshtml", contracts);
        }

        [Authorize]
        [HttpPost]
        public async Task<IActionResult> AddToFAvorites(int id)
        {
            try
            {
                ApplicationUser user = await _userManager.GetUserAsync(this.User);
                Contract contract = _context.Contracts.FirstOrDefault(c => c.Id == id);

                _context.Favorites.Add(new Favorites()
                {
                    User = user,
                    Contract = contract
                });

                _context.SaveChanges();
            }
            catch (Exception)
            {
                return Json(new
                {
                    success = false
                });
            }

            return Json(new
            {
                success = true
            });
        }
    }
}
